正课：
1. ***循环
2. ***数组

1. ***循环：让程序反复执行相同代码段
   三要素：1. 循环条件：可以继续进入循环的条件
           2. 循环变量：循环条件中用作判断的变量
                有规律：从几开始，到几结束，每次增/减几
           3. 循环体：反复执行的代码段
   循环变量的变化没有规律：while
       var 循环变量=初始值;
       while(循环条件){
	   循环体;
           迭代变化循环变量;
       }
   
   do...while循环: 即使第一次条件不满足，也至少可以执行一次
       var 循环变量=初始值;
       do{
	   循环体;
           迭代变化循环变量;
       }while(循环条件);
   while vs do while
    如果第一次条件都满足，两者完全等效
    如果第一次条件不满足，while是一次都不执行
                          do while至少可以执行一次
    鄙视时，只看第一次条件是否满足！

   循环变量的变化有规律: for
       for(var 循环变量=初始值;循环条件;迭代变化循环变量){
	   循环体;
       }
   其实，for和while循环是通用的
   for循环的特殊用法：
	1. 声明并初始化变量部分可提前到for之前外部
        2. 声明并初始化变量部分可同时声明并初始化多个变量
        3. 迭代变化循环变量部分可同时修改多个变量
        4. 迭代变化循环变量部分可省略或放在循环体结尾
        5. 死循环：for(;;)  while(true)
   *循环中的大括号不能省略！

*********************************
   【js中的循环变量】 vs 【Java中的循环变量】
   js中只有2个作用域:全局 函数
	循环内的变量，出了循环可继续使用
   Java中有三个作用域：全局 函数 块({})
        循环内的变量，出了循环不可使用！
*********************************

   退出循环：2种选择：
     1. 使用循环条件控制退出循环――优雅――要求高
     2. 使用break随时退出循环――野蛮――随意

   continue: 跳过本轮循环，继续下一轮
  
   
2. ***数组：一组变量的集合，再起一个统一的名字
            内存中存储多个数据的引用类型的对象
   程序=数据结构+算法
     算法：程序执行的步骤，顺序，分支，循环
     数据结构：数据在内存中的存储结构
       好的数据结构，可极大的提高程序的执行效率
   何时使用：程序中，集中分类管理多个数据时
   如何使用：创建  取值  赋值
     创建：5种：
      1. var arr=[]; 创建空数组
      2. var arr=[值1,值2,...]; 创建同时初始化数组元素

      3. var arr=new Array(); 创建空数组
             new: 在内存中开辟一块存储空间――创建一个新对象
             Array: 数组类型名
             new Array()：创建一个Array类型的新对象
      4. var arr=new Array(n); 创建n个空元素的数组
      5. var arr=new Array(值1,值2,...);创建同时初始化数组元素

     获得数组中每个元素： 数组名[i]
     数组中每个元素的用法和普通变量完全一样！
 
  ***数组是引用类型的对象：
     多个变量可同时引用同一个数组对象，通过任意一个变量修改数组，都会影响对方。

     null: 原始类型的值，主动释放一个变量引用的对象
       何时使用：只要使用完较大的对象，都要用null主动释放？？？
**************
【引用数组的变量，主动释放方式
  变量 = null; //释放使用较大对象
】
************
     垃圾回收器：js引擎中的一个小程序
                 伴随主程序执行
                 统计每个对象被引用的次数――引用计数器
                 只有一个对象不再被任何变量引用时，就会被回收
     
        












