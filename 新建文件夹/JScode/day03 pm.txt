正课：
1. ***关联数组
2. *数组API：已经实现的，直接使用的对象和函数

   索引数组：下标自动生成且是数字的数组 
             arr.length属性始终是最大下标+1
             固定套路：
               1. 获得最后一个元素：arr[arr.length-1]
               2. 末尾增加一个新元素：arr[arr.length]=新值
	          js数组特点：没有长度限制，可随时增加新元素。
                              可在任意下标位置增加新元素
                              数组会根据最大下标调整length属性
               3. 缩容：减少length属性值，可减少元素个数
   遍历索引数组：
	for(var i=0;i<arr.length;i++){...}	

1. 关联(hash)数组：可自定义下标名称的数组
   何时使用关联数组：希望每个元素的值都有固定的意义，就可自定义下标名。
   如何使用：创建  访问元素
     创建：2步：
      1. 创建空数组：var hash=[];
      2. 向数组中添加新元素，自定义下标名: hash["下标名"]=值
     关联的length属性始终是0，失效！
     访问元素：hash["下标名"]――和索引数组每个元素用法相同

    遍历关联数组：for in循环:依次取出hash数组中每个下标，保存在变量key中。
     for(var key in hash){...}

    关联数组 vs 索引数组：
 ***js中一切都是关联(hash)数组：
	其实索引数组底层也是关联数组，只不过索引数组的下标都是数字而已。而且索引数组的length属性有效。
    
    为什么叫hash数组：
	hash算法：将一个字符串，换算成一个尽量不重复的数值
                  不同的字符串，换算结果几乎不重复
                  同一个字符串，每次计算的结果，一定相同的。
        hash数组：采用hash算法分配元素存储位置的数组。
                  hash算法负责将自定义的key换算成实际存储位置

    关联数组查找效率极快，不需要遍历，和元素个数无关！
    索引数组只能通过遍历查找元素！效率受元素个数的影响。

2. 数组API：
    1. 数组 to 字符串：2个
       var str=arr.toString();//输出每个元素的内容，用逗号分隔
               何时使用：一般自动调用
       var str=arr.join("连接符");//输出每个元素的内容，使用自定义的连接符连接。如果省略连接符，则等效于toString
       固定套路：
         1. 无缝拼接数组为字符串：
	     var chars=['H','e','l','l','o'];
             var word=chars.join("");
         2. 将单词，拼接成句子：
             var words=['no','zuo','no','die']
             var stmt=words.join(" ");
         3. 将数组拼接成html元素！
    ***优化：如果出现频繁拼接字符串，可用数组+join方法代替

    2. 连接数组：var newArr=arr1.concat(值1,值2,arr2,...)
         *不修改原数组，而是返回新数组，必须用变量接住新数组
    3. 获得子数组：var subArr=arr.slice(starti,endi+1);
         starti: 开始位置的下标
         endi: 结束位置的下标,含头不含尾
         slice支持负数参数，如果参数为负，则自动用length-参数
    4. splice：删除  插入  替换 ――直接修改原数组
        1. 删除：[var deleted=]arr.splice(starti,n)
            starti表示开始删除的位置, n表示删除的个数
            deleted表示被删除的元素，临时组成的子数组
        2. 插入：arr.splice(starti,0,值1,值2,...)
            starti表示开始插入的位置，
            0表示一个都不删除
            值1,...:要在starti位置插入的新值。
        3. [var deleted=]arr.splice(starti,n,值1,值2,...)
    5. 颠倒数组的元素：arr.reverse();
         









