正课:
1. *数组API
    栈和队列
    二维数组
2. ***字符串

1. *数组API：
   栈和队列：
    栈：一端封闭，只能从另一端进出的数组
	FILO
     何时使用：希望封闭数组一端，只能从另一端进出
     如何使用：
     1. 开头封闭，结尾出入栈：
        入：arr.push(值);
        出：var last=arr.pop();
        出入栈操作不影响旧元素的下标
     2. 结尾封闭，开头出入栈：
        入：arr.unshift(值);
        出：var first=arr.shift();
        每次出入栈操作，都影响所有元素的下标
    队列：只能从一端进入，必须从另一端出
        FIFO
     何时使用：希望只能从一端进入，从另一端出时
     如何使用：
      结尾入队列：arr.push(值)
      开头出队列：var first=arr.shift()

    concat拼接  vs unshift,push
	unshift push直接修改原数组
        concat不直接修改原数组，而是返回新数组对象

        unshift push每次只能压入一个元素，不支持数组参数
        concat可拼接任意个元素，且支持数组参数
     总结：仅压入一个元素时，就用栈操作
           同时拼接多个元素时，就用concat

    二维数组：数组中的元素，又引用了另一个子数组
    何时使用：1.只要存储横行竖列的二维数据时
              2.存储上下级的包含关系
    如何定义二维数组：
       1. 创建同时，就初始化数组内容：
           var arr=[
    		[元素1,元素2,....],
                [元素1,元素2,....],
                ...
           ];
       2. 先创建普通数组，再赋值：
           var arr=[];
           arr[0]=[元素1,元素2,....];
           arr[1]=[元素1,元素2,....];
    如何使用二维数组：
      1. 访问每个元素: arr[r][c]
        二维数组中，行下标r不能越界，否则报错！
        r没越界，c越界，返回undefined，不报错！
      2. 遍历：外层循环控制行，内存循环控制列
	for(var r=0;r<arr.length;r++){
	     for(var c=0;c<arr[r].length;c++){
		当前元素：arr[r][c]
             }
        }

2. ***字符串：由多个字符组成的只读数组
      只读：所有API都不能直接修改原字符串，必须返回新字符串
      数组：凡是数组中不直接修改原数组的API，字符串都能用！
        比如：1. 都可用下标访问每个字符:str[i]
              2. .length属性获得字符个数
              3. 获取子字符串: str.slice(starti,endi+1)
   1. js的内置对象：ES标准中规定的，浏览器厂商已经实现的对象
       11个：
       String Number Boolean ――包装类型：
       Array Date Math RegExp
       Error
       Function Object
       Global

   ***包装类型：专门封装原始类型的值，提供对值进行操作的方法
      为什么使用：原始类型的值不带任何操作方法，必须通过包装类型提供对原始类型操作的方法
      何时使用：在试图对原始类型的值调用方法时，js会自动创建对应的包装类型对象，封装原始类型的值。

  作业：100题中：1,9,11










