正课：
1. ***数据类型转换
2. ***运算符和表达式

1. ***数据类型转换：
    1. 隐式转换：
    2. 强制转换：程序员通过调用函数完成的类型转换
       任意->字符串：2个函数
          var str=x.toString() x不能是null或undefined
          var str=String(x) 万能――相当于隐式类型转换
          一般都是自动调用，不需要手动调用
       检测数据类型：typeof(x)-->返回类型名 
          其实String(x)的源码：
          function String(x){
    		if(x===null){
        		return "null";
    		}else if(x===undefined){
        		return "undefined";
    		}else{
        		return x.toString();
    		}
	  }
       补：var value=x.valueOf(),仅取出x内部的值，不做类型转换
     鄙视题：区分String() toString() valueOf()

       任意->数字：3个函数
       任意->数字：var n=Number(x) -->相当于隐式转换
               强调：Number中只能转换纯数字组成的内容
           特殊：Number(null)->0  Number(undefined)->NaN
                 Number("")->0
           何时使用：隐式转为数字时自动调用
***********************************
**********  【抄十遍】*****************
       字符串->数字：
	   var n=parseInt(str)
	      从左向右，依次读取str中的数字字符
              直到碰到第一个非数字字符就退出
              自动跳过开头的空字符
              不认小数点，省略小数部分
           var n=parseFloat(str)
	      认识第一个小数点
           何时使用：字符串类型转数字时使用

        Number vs parseXXX
        对于bool类型：Number可以转，parseXXX转不了
        对于结尾带单位的字符串: Number不能转换，parseXXX可以转

        任意->bool: Boolean(x)――隐式转换
          规则：除了0,NaN,null,undefined,""转为false外，
                其余都转为true。
****************************************
2. ***运算符和表达式：
   程序：“人的想法”在计算机中的执行
   运算符：程序模拟人类想法的特殊符号
   表达式：由变量，运算符和数据组成的公式
         所有表达式都返回一个结果，都可当做一个值使用

   1. 算数运算：
        %模运算(取余数)：m%n,先m/n，取除不尽的余数部分
             何时使用：1. 判断能否被整除
                       2. 限制运算结果的上限
        ++，--: 
         n++; ==> n=n+1; 单独使用，++写前写后都一样
        如果参与其他表达式中：
	   都是将变量中的值+1
          前++: 返回*新*值
          后++: 返回*旧*值

    2. 关系运算：做比较！返回bool类型结论
       普通:> < >= <= != ==
       隐式转换：默认都转为数字再比较
　　　　　　　如果参与比较的都是字符串，则按位PK unicode号
       特殊：1. 判断是不是NaN：isNaN(num)
		如果num是NaN，就返回true，否则返回false
              为什么：NaN不等，不大于，不小于任何值，甚至自己
			NaN和任何数据做!=比较，永远返回true
              习惯用法：判断num是不是数字
                 !isNaN(num): 返回true，说明是数字
                              返回false，说明不是数字
         2. null  undefined
          undefined: 所有变量的默认值，自动赋值
          null: 主动清空一个变量(主动释放对象)
          问题：用==无法判断null和undefined
          解决：全等===：先数据类型必须相同，再数值相等
                  ===不带隐式转换
          何时使用：狭义：区分null和undefined时
                    广义：只要不希望隐式转换时，就用全等

     3. 逻辑运算：将多个关系运算综合得出最终结论
                  做判断-->返回bool类型true/false
          隐式转换：默认将所有条件转化为bool，再联合判断结果
          &&:"且"，所有条件都为true，结果才为true,
		   只要一个条件为false，结果就为false
          ||:"或"，只要一个条件为true，结果就为true
	           只有所有条件都为false，结果才为false
          ! :"不"，颠倒任意关系运算和逻辑运算的结果
     ***短路逻辑：只要前一个条件已经可以得出最终结论，后续条件不再执行。
        利用短路逻辑：2种：
        1.一个条件，一件事，满足条件才执行，不满足就什么也不做
        total>=500&&(total=total*0.8)
        2.设置默认值：||
        值1||值2 -->返回两值中有效的一个

     4. 位运算：>> <<
        左移: m<<n 将m的二进制数左移n位，相当于*2的n次方
        右移: m>>n 将m的二进制数右移n位，相当于/2的n次方
        
     5. 扩展赋值运算：先修改变量中的值，再存会变量
          +=  -=   *=   /=    %=
         m+=n --> m=m+n
  
     6. ***三目/三元/条件运算：
	   什么是根据不同的条件返回不同的值/执行不同的操作
           何时使用：
           如何使用：
           条件1?操作1/值1:
           条件2?操作2/值2:
              ...  ...:
              默认操作/默认值;-->不能省！
           三目 vs if...else
	   第一种情况：
             如果操作简单，首选三目
             如果操作复杂，用if...else
           第二种情况：
             如果操作只是获得不同的值，也可用三目代替if...else
           第三种情况：
             如果希望省略默认操作时，只能用if...else
           
         
          

       
















