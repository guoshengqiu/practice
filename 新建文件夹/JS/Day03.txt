1、if结构
   if(条件1){
	语句块1;
   }
   if(条件2){
	语句块2;
   }

   if(条件1){
   
   }else if(条件2){
	
   }else if(){
	
   }

1、需求1
   在控制台上打印 10 遍Javascript
   console.log("javascript");
   需求2
   在控制台上打印 100 遍 Javascript
   需求3
   在控制台上打印 第1遍 Javascript 
   ....
   ....
   第100遍 Javascript 

   循环：重复执行 相同 或 相似的功能
   生活中的循环:
   1、活着
   2、上学(上班)
      上学： 毕业 4个月
      上班： 退休 
   3、地球 公转 自转


   循环的特点：
     1、循环条件：规定了循环的开始 和 结束
     2、循环操作：循环的过程中，做了什么

     1、打印10遍Javascript
        循环条件:从 第1遍 开始 ， 到 第10遍 结束
	循环操作:打印 javascript 
     2、打印100遍Javascript
        循环条件:从 第1遍 开始 ， 到 第100遍 结束
	循环操作:打印 javascript
     3、打印 100 遍  第 n 遍 Javascript
        循环条件：从 第1遍 开始 ， 到 第100遍 结束
	循环操作：遍数 打印 javascript
     4、每打印10遍Javascript后，增加一条分割线
        ***********************************

1、while循环
   语法：
      while(条件boolean类型表达式){
	//循环操作
      }
      ===================================
      //声明开始的条件
      while(结束条件){
	//循环操作
      }
      注意：条件为真的时候能够执行循环体，直到条件变为假则退出循环 
      while ：最少 一遍 都不执行 0遍
      不要让条件一直保持为真，否则会变成  死循环
 
 练习1：
    做两个函数
    第一个函数  计算 1- 100之间 所有数字的和
    第二个函数  计算 1 -100之间 所有偶数的和
2、提前终止循环
   1、break
      用于提前结束循环操作
      while(i >= 1000){
	...
	if( ... ){
		break;
	}
	...
      }
      ...

      让用户随意输入数字，输入 0 则退出，其余则打印，继续输入

 3、
   在确定循环次数的条件下 必须需要三要素

   1、循环开始的条件
   2、循环结束的条件
   3、更新循环变量


   for循环结构 --> while 循环替代品
   语法：
      for(表达式1;表达式2;表达式3){
	//循环操作
      }
      
      表达式1：循环变量的声明
      表达式2：循环条件，条件为true、则执行循环体，条件为false，则跳出循环
      表达式3：更新循环变量

      for(var i=1;i<5;i++){
	console.log(i);
      }

      使用场合:
      1、while循环更适合使用在不固定循环次数的循环操作当中
         while(true){
		if(..){
			break;
		}
	 }
      2、for循环更适合使用在 确定循环次数的循环操作当中
         for(循环变量声明;判断条件;变量自增)
练习：
  通过 for 循环语句操作
  1、创建一个函数  实现 1+2+3 +....999的和
  2、创建一个函数  实现 1+3+5 + .... + 999的和

for的特殊表示方式
  1、省略第一个表达式
     for(;表达式2;表达式3){
	
     }
     
     var i=0;
     for(;i<100;i++){
	console.log(i);
     }

     使用场合：循环变量不是固定的，而是通过一些计算得到。
  2、省略第二个表达式
     for(表达式1;;表达式3){
	
     }
     缺少表达式2 ， 则为死循环
     注意：一定要在循环体中 指定循环退出的条件
  3、省略第三个表达式
     for(表达式1;表达式2;){
	
     }
     缺少表达式3 , 死循环,有可能不进入到循环结构中
  4、for(;;){
	
     }
     死循环
     在for循环之外、之内，一定要给足三个表达式
     var i=0;
     for(;;){
	if(i == 10){
		break;
	}
	i ++;
     }
  5、表达式多样化
     for(初始化1,初始化2;条件1,条件2;更新1,更新2){
	
     }






      表达式1;
      while(表达式2){
	//循环操作
	//更新循环变量
	表达式3;
      }

      var i= 1;
      while(i < 5){
	console.log(i);
	i ++;
      }


数组：
    保存 1200 名学员的 姓名
     数组：一组数据 保存在一个变量里
     数组元素 按照线性顺序排列，线性顺序就是 除第一个元素外，每个元素都有一个 前驱元素；除最后一个元素外，每个元素都有一个 后继元素 
     下标：索引，表示的是数组中元素的位置，从0 开始 
定义一维数组(Array):
   1、var arr1 = [];
      创建一个 不包含 任何 元素的数组
   2、var arr2 = ["张三丰","张翠山","张无忌"];
      创建一个 包含 三个字符串元素的数组
   3、var arr3 = new Array();
      创建一个 不包含任何元素的数组
   4、var arr4 = new Array("张无忌",28,true,"赵敏");
      创建一个包含 4个元素的数组
数组属性:
   1、用于获取数组中元素的个数，又称为数组长度
      属性:length
      下标范围:0 ~ (数组.length-1)
遍历数组:
   1、通过 length 属性 来构建元素的下标
      下标起始值:0
      下标结束值:数组.length - 1





